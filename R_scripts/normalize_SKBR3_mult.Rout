
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #### Use default R = 3.3 for DNAcopy_1.50.1
> 
> library("DNAcopy", lib.loc="/mnt/wigclust5/data/safe/kendall/DNAcopy_1.50.1")
> 
> # normalization function
> lowess.norm <- function(jtkx, jtky) {
+ 		loweights<-c(rep(1,4750),rep(0,250))
+ 		pseudo<-0.001
+ 		logbad <-log(jtky+pseudo)
+ 		lfit<-loess(logbad~jtkx,weights=loweights,span=0.05,degree=1)
+ 		norm_ratio<-exp(lfit$residuals)
+ 		return(norm_ratio)
+         # jtklow <- lowess(jtkx, log(jtky), f=0.05)
+         # jtkz <- approx(jtklow$x, jtklow$y, jtkx)
+         # return(exp(log(jtky) - jtkz$y))
+ }
> 
> cbs.segment.uber01.hg19dm6 <- function(outdir, indir, varbin.gc, varbin.len, thisUber, abspos.col, alpha, nperm, undo.SD, min.width) {
+ 
+ 	gc <- read.table(varbin.gc, header=T)
+ 	lengths <- read.table(varbin.len, header = T)
+ 
+ 	chrom.numeric <- substring(gc$bin.chrom, 4)
+ 	chrom.numeric[which(gc$bin.chrom == "chrX")] <- "23"
+ 	chrom.numeric[which(gc$bin.chrom == "chrY")] <- "24"
+ 	chrom.numeric[which(gc$bin.chrom == "chr2L_dm")] <- "25"
+ 	chrom.numeric[which(gc$bin.chrom == "chr2R_dm")] <- "26"
+ 	chrom.numeric[which(gc$bin.chrom == "chr3L_dm")] <- "27"
+ 	chrom.numeric[which(gc$bin.chrom == "chr3R_dm")] <- "28"
+ 	chrom.numeric[which(gc$bin.chrom == "chr4_dm")] <- "29"
+ 	chrom.numeric[which(gc$bin.chrom == "chrX_dm")] <- "30"
+ 	chrom.numeric[which(gc$bin.chrom == "chrY_dm")] <- "31"
+ 	chrom.numeric <- as.numeric(chrom.numeric)
+ 
+ 	thisUberRatio <- thisUber
+ 	thisUberRatioQuantal <- thisUber
+ 	thisUberSeg <- thisUber
+ 	thisUberSegQuantal <- thisUber
+ 
+ 
+ 	for (i in 1:ncol(thisUber)) {
+ 		sample.name <- dimnames(thisUber)[[2]][i]
+ 		cat(i, dimnames(thisUber)[[2]][i], "\n")
+ 		
+ 		thisBincount <- thisUber[, i] + 1
+ 		thisRatio <- thisBincount / mean(thisBincount)
+ 
+ 		#normalize the bin counts for GC content and median bin fragment length
+ 		thisLowratio_1 <- lowess.norm(gc$gc.content, thisRatio)
+ 		thisLowratio <- lowess.norm(lengths$median.len, thisLowratio_1)
+ 
+ 		thisUberRatio[, i] <- thisLowratio
+ 
+ 		cat("thisLowratio stats: ", min(thisLowratio), max(thisLowratio), mean(thisLowratio), "\n")
+ 
+ 		set.seed(25) 
+ 		CNA.object <- CNA(log(thisLowratio), chrom.numeric, gc$bin.start.chrompos, data.type="logratio", sampleid=dimnames(thisUber)[[2]][i]) 
+ 		smoothed.CNA.object <- smooth.CNA(CNA.object) 
+ 		segment.smoothed.CNA.object <- segment(smoothed.CNA.object, alpha=alpha, nperm=nperm, undo.splits="sdundo", undo.SD=undo.SD, min.width=2) 
+ 		thisShort <- segment.smoothed.CNA.object[[2]]
+ 
+ 		m <- matrix(data=0, nrow=nrow(thisUber), ncol=1)	
+ 		prevEnd <- 0
+ 		for (j in 1:nrow(thisShort)) {
+ 			thisStart <- prevEnd + 1
+ 			thisEnd <- prevEnd + thisShort$num.mark[j]
+ 			m[thisStart:thisEnd, 1] <- exp(thisShort$seg.mean[j])
+ 			prevEnd = thisEnd
+ 		}
+ 		thisUberSeg[, i] <- m[, 1]
+ 
+ 		cat("thisUberseg stats: ", min(thisUberSeg[, i]), max(thisUberSeg[, i]), mean(thisUberSeg[, i]), "\n")
+ 
+ 		# get median bin ratio for drosophila genome
+ 		humanEnd <- max(which(chrom.numeric=="23"))
+ 		startLoc <- min(which(chrom.numeric=="25"))
+ 		endLoc <- max(which(chrom.numeric=="28"))
+ 		med_val <- median(thisUberSeg[startLoc:endLoc,i])
+ 		cat("median fly ratio: ", med_val, "\n")
+ 
+ 		# divide segmented values by the median of the fly chromosomes
+ 		rb <- thisUberSeg[,i] / med_val
+ 		humanSeg <- rb[1:startLoc-1]
+ 		end <- length(thisUberSeg[,i])
+ 		flySeg <- rb[startLoc:end]
+ 
+ # ############
+ 		flySum <- sum(thisUber[startLoc:5000,i])
+ 		humanSum <- sum(thisUber[1:startLoc-1, i])
+ 		cat("fly/human number of reads: ", flySum/humanSum, "\n")
+ 
+ 		flySum <- sum(thisLowratio_1[startLoc:5000])
+ 		humanSum <- sum(thisLowratio_1[1:startLoc-1])
+ 		cat("GC norm fly/human number of reads: ", flySum/humanSum, "\n")
+ 
+ 		flySum <- sum(thisLowratio[startLoc:5000])
+ 		humanSum <- sum(thisLowratio[1:startLoc-1])
+ 		cat("len norm fly/human number of reads: ", flySum/humanSum, "\n")
+ # ##########
+ 		# humanFragLen <- mean(lengths[1:startLoc-1,5])
+ 		# flyFragLen <- mean(lengths[startLoc:5000,5])
+ 		# cat("mean len human: ", humanFragLen, " mean len fly: ", flyFragLen,"\n")
+ 
+ 		
+ 		#get multiplier by minimizing the residuals
+ 		#TODO - extract these values from the file containing info about SKN1/fly alignment, dont hardcode
+ 		thisGrid <- seq(0.86, 0.94, by=0.005)
+ 		thisOuter <- humanSeg %o% thisGrid
+ 		thisOuterRound <- round(thisOuter)
+ 		thisOuterDiff <- (2 * thisOuter - thisOuterRound) ^ 2
+ 		thisOuterColsums <- colSums(thisOuterDiff, na.rm = FALSE, dims = 1)
+ 		thisMultiplier <- thisGrid[which.min(thisOuterColsums)]
+ 		thisError <- min(thisOuterColsums)
+ 
+ 		cat("multiplier", thisMultiplier, "\tminimized", thisError, "\n", "\n")
+ 
+ 		thisLowratioQuantal <- c(thisLowratio[1:startLoc-1] * thisMultiplier, thisLowratio[startLoc:end]) / med_val
+ 		thisSegQuantal <- c(humanSeg  * thisMultiplier, flySeg)
+ 
+ 		# thisUberRatioQuantal[, i] <- thisLowratioQuantal
+ 		# thisUberSegQuantal[, i] <- thisSegQuantal
+ 
+ 		chr <- chrom.numeric
+ 		chr.shift <- c(chr[-1], chr[length(chr)])
+ 		vlines <- c(1, abspos.col[which(chr != chr.shift) + 1], abspos.col[nrow(thisUber)])
+ 		hlines <- c(0.25, 0.5, 1.0, 1.5, 2.0)
+ 		chr.text <- c(1:22, "X", "Y", "2L\n\n", "2R\n", "3L", "3R\n\n", "4\n", "X", "Y\n\n")
+ 		vlines.shift <- c(vlines[-1], 4*10^9)
+ 		chr.at <- vlines + (vlines.shift - vlines) / 2
+ 		x.at <- c(0, 0.5, 1, 1.5, 2, 2.5, 3) * 10^9
+ 		x.labels <- c("0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0")
+ 	
+ 		hlines <- c(0, 1, 2, 3, 4, 5, 6)
+ 
+ 		png(paste(outdir, "/", sample.name, ".5k.len.norm.png", sep=""), height=800, width=1200)
+ 		plot(x=abspos.col, y=thisLowratio, ylim=c(0,10), main=paste(sample.name, ""), xaxt="n", xlab="Genome Position Gb", ylab="Ratio", col="#CCCCCC")
+ 		axis(1, at=x.at, labels=x.labels)
+ 		lines(x=abspos.col, y=thisLowratio, col="#CCCCCC")
+ 		points(x=abspos.col, y=thisUberSeg[, i], col="#0000AA")
+ 		lines(x=abspos.col, y=thisUberSeg[, i], col="#0000AA")
+ 		abline(h=hlines)
+ 		abline(v=vlines)
+ 		mtext(chr.text, at = chr.at)
+ 		dev.off()
+ 
+ 		png(paste(outdir, "/", sample.name, ".5k.len.quantal.png", sep=""), height=800, width=1200)
+ 		plot(x=abspos.col, y=thisLowratioQuantal, ylim=c(0,10), main=paste(sample.name, ""), xaxt="n", xlab="Genome Position Gb", ylab="Ratio", col="#CCCCCC")
+ 		axis(1, at=x.at, labels=x.labels)
+ 		lines(x=abspos.col, y=thisLowratioQuantal, col="#CCCCCC")
+ 		points(x=abspos.col, y=thisSegQuantal, col="#0000AA")
+ 		lines(x=abspos.col, y=thisSegQuantal, col="#0000AA")
+ 		abline(h=hlines)
+ 		abline(v=vlines)
+ 		mtext(chr.text, at = chr.at)
+ 		dev.off()
+ 
+ 		thisRatioOut <- data.frame(gc[, 1:3], "bincount"=thisBincount, "ratio" = thisRatio, "gc.content" = gc$gc.content, "lowratio" = thisLowratio, "seg.mean.LOWESS" = thisUberSeg[, i], "ratio.quantal" = thisLowratioQuantal, "seg.quantal" = thisSegQuantal)
+ 		write.table(thisRatioOut, sep="\t", file=paste(outdir, "/", sample.name, ".hg19dm6.varbin.data.txt", sep=""), quote=F, row.names=F)
+ 
+ 	}
+ 	return(list(thisUberRatio, thisUberRatioQuantal, thisUberSeg, thisUberSegQuantal))
+ }
> 
> #use this just to get the column containing absolute start positions of bins
> a.varbin <- read.table("/mnt/wigclust1/data/safe/kostic/SNS_data_2/b15_5_varbin_count.txt", sep="\t", header=F, as.is=T, stringsAsFactors=F)
> #####change file to one with correct date
> uber.ratio.nla3.88 <- read.table("/mnt/wigclust1/data/safe/kostic/SNS_data_SKBR3/range125_600_uber_varbin_count_data.txt", sep="\t", header=T, as.is=T, stringsAsFactors=F)
> nla3.88.count.mat <- as.matrix(uber.ratio.nla3.88)
> #######change to correct dated files
> nla3.88.results <- cbs.segment.uber01.hg19dm6(outdir="/mnt/wigclust1/data/safe/kostic/SNS_data_SKBR3", indir="", varbin.gc="/mnt/wigclust1/data/safe/kostic/bin_mapping/range125_600_GC.txt", varbin.len = "/mnt/wigclust1/data/safe/kostic/bin_mapping/range125_600_LEN.txt", thisUber=nla3.88.count.mat, abspos.col=a.varbin$V3, alpha=0.02, nperm=1000, undo.SD=0.5, min.width=3)
1 SKBR3_Fly_F4 
thisLowratio stats:  0.03248828 11.76415 1.074321 
Analyzing: SKBR3_Fly_F4 
thisUberseg stats:  0.02327676 8.20218 1.036965 
median fly ratio:  0.1062671 
fly/human number of reads:  0.002906728 
GC norm fly/human number of reads:  0.003967622 
len norm fly/human number of reads:  0.003275735 
multiplier 0.86 	minimized 471427.5 
 
2 SKBR3_Fly_F5 
thisLowratio stats:  0.02825939 15.44724 1.091624 
Analyzing: SKBR3_Fly_F5 
thisUberseg stats:  0.03982342 11.97475 1.062205 
median fly ratio:  0.2799344 
fly/human number of reads:  0.008573565 
GC norm fly/human number of reads:  0.008462273 
len norm fly/human number of reads:  0.007893671 
multiplier 0.86 	minimized 76788.4 
 
3 SKBR3_Fly_F7 
thisLowratio stats:  0.03990782 16.06674 1.100884 
Analyzing: SKBR3_Fly_F7 
thisUberseg stats:  0.0560058 6.097629 1.058851 
median fly ratio:  0.2970366 
fly/human number of reads:  0.008316256 
GC norm fly/human number of reads:  0.008452639 
len norm fly/human number of reads:  0.00826433 
multiplier 0.86 	minimized 63979.44 
 
4 Single_Fly_H8 
thisLowratio stats:  0.897429 61.23705 2.050326 
Analyzing: Single_Fly_H8 
thisUberseg stats:  0.9496137 44.82204 1.983541 
median fly ratio:  39.96084 
fly/human number of reads:  15.91104 
GC norm fly/human number of reads:  1.024553 
len norm fly/human number of reads:  1.065136 
multiplier 0.86 	minimized 8.769185 
 
5 SKBR3_Fly_H9 
thisLowratio stats:  0.8654744 84.97675 2.282698 
Analyzing: SKBR3_Fly_H9 
thisUberseg stats:  0.9579114 55.2628 2.235441 
median fly ratio:  48.67668 
fly/human number of reads:  23.71777 
GC norm fly/human number of reads:  1.350974 
len norm fly/human number of reads:  1.304566 
multiplier 0.86 	minimized 5.930428 
 
6 SKBR3_Fly_D12 
thisLowratio stats:  0.04184479 14.90181 1.100669 
Analyzing: SKBR3_Fly_D12 
thisUberseg stats:  0.0280659 6.312299 1.061069 
median fly ratio:  0.3202671 
fly/human number of reads:  0.01073677 
GC norm fly/human number of reads:  0.01079092 
len norm fly/human number of reads:  0.008799171 
multiplier 0.86 	minimized 53563.88 
 
7 SKN1_Fly_C6 
thisLowratio stats:  0.04046247 3.046302 0.9899793 
Analyzing: SKN1_Fly_C6 
thisUberseg stats:  0.1353488 1.200094 0.9746937 
median fly ratio:  0.2325151 
fly/human number of reads:  0.007322052 
GC norm fly/human number of reads:  0.007087009 
len norm fly/human number of reads:  0.007085099 
multiplier 0.86 	minimized 63270.21 
 
8 SKBR3_Fly_E7 
thisLowratio stats:  0.02759928 16.60121 1.09473 
Analyzing: SKBR3_Fly_E7 
thisUberseg stats:  0.02471117 10.89278 1.06491 
median fly ratio:  0.3391204 
fly/human number of reads:  0.01009145 
GC norm fly/human number of reads:  0.009829142 
len norm fly/human number of reads:  0.008630599 
multiplier 0.86 	minimized 52061.32 
 
9 SKBR3_Fly_E9 
thisLowratio stats:  0.01922114 15.7863 1.081064 
Analyzing: SKBR3_Fly_E9 
thisUberseg stats:  0.01553593 6.398733 1.050732 
median fly ratio:  0.0311918 
fly/human number of reads:  0.0007378189 
GC norm fly/human number of reads:  0.001444671 
len norm fly/human number of reads:  0.001215915 
multiplier 0.86 	minimized 5858899 
 
10 SKBR3_Fly_E10 
thisLowratio stats:  0.0293059 12.33673 1.099135 
Analyzing: SKBR3_Fly_E10 
thisUberseg stats:  0.03979954 6.812097 1.062406 
median fly ratio:  0.2934347 
fly/human number of reads:  0.007150476 
GC norm fly/human number of reads:  0.007095702 
len norm fly/human number of reads:  0.007828584 
multiplier 0.86 	minimized 68443.67 
 
11 SKBR3_Fly_E11 
thisLowratio stats:  0.02676028 16.08476 1.093626 
Analyzing: SKBR3_Fly_E11 
thisUberseg stats:  0.04288213 11.71652 1.062451 
median fly ratio:  0.4408723 
fly/human number of reads:  0.01244035 
GC norm fly/human number of reads:  0.01193846 
len norm fly/human number of reads:  0.01185761 
multiplier 0.86 	minimized 29364.6 
 
12 SKBR3_Fly_E12 
thisLowratio stats:  0.03254675 14.89933 1.086533 
Analyzing: SKBR3_Fly_E12 
thisUberseg stats:  0.04303248 9.960228 1.056014 
median fly ratio:  0.3633822 
fly/human number of reads:  0.01054688 
GC norm fly/human number of reads:  0.01039996 
len norm fly/human number of reads:  0.009160254 
multiplier 0.86 	minimized 43533.49 
 
13 SKBR3_Fly_D3 
thisLowratio stats:  0.01829046 14.8615 1.107103 
Analyzing: SKBR3_Fly_D3 
thisUberseg stats:  0.03065376 6.614075 1.076007 
median fly ratio:  0.4681343 
fly/human number of reads:  0.01427222 
GC norm fly/human number of reads:  0.01347286 
len norm fly/human number of reads:  0.01204151 
multiplier 0.86 	minimized 28389.91 
 
14 Single_Fly_H7 
thisLowratio stats:  0.7732671 115.1701 2.870748 
Analyzing: Single_Fly_H7 
thisUberseg stats:  0.9364117 70.71799 2.780043 
median fly ratio:  68.71723 
fly/human number of reads:  24.61872 
GC norm fly/human number of reads:  2.057971 
len norm fly/human number of reads:  1.858703 
multiplier 0.86 	minimized 2.985184 
 
15 SKBR3_Fly_F8 
thisLowratio stats:  0.01677204 17.53459 1.091963 
Analyzing: SKBR3_Fly_F8 
thisUberseg stats:  0.02219252 6.71202 1.062054 
median fly ratio:  0.6055004 
fly/human number of reads:  0.00934805 
GC norm fly/human number of reads:  0.008993961 
len norm fly/human number of reads:  0.008452404 
multiplier 0.86 	minimized 16585.26 
 
16 SKBR3_Fly_F9 
thisLowratio stats:  0.01282816 14.06547 1.081892 
Analyzing: SKBR3_Fly_F9 
thisUberseg stats:  0.01717501 5.997844 1.055208 
median fly ratio:  0.01895855 
fly/human number of reads:  8.742405e-05 
GC norm fly/human number of reads:  0.0006083041 
len norm fly/human number of reads:  0.0005894502 
multiplier 0.86 	minimized 15503547 
 
17 SKBR3_Fly_F11 
thisLowratio stats:  0.0148449 13.41138 1.076162 
Analyzing: SKBR3_Fly_F11 
thisUberseg stats:  0.01922584 6.03756 1.052257 
median fly ratio:  0.1338548 
fly/human number of reads:  0.004222021 
GC norm fly/human number of reads:  0.004222824 
len norm fly/human number of reads:  0.003662899 
multiplier 0.86 	minimized 312367.9 
 
18 SKBR3_Fly_F12 
thisLowratio stats:  0.01664577 12.04579 1.066122 
Analyzing: SKBR3_Fly_F12 
thisUberseg stats:  0.02098809 4.7313 1.041946 
median fly ratio:  0.2222394 
fly/human number of reads:  0.007678426 
GC norm fly/human number of reads:  0.007443335 
len norm fly/human number of reads:  0.00603983 
multiplier 0.86 	minimized 102827.7 
 
19 SKBR3_Fly_E1 
thisLowratio stats:  0.04372395 18.22578 1.110768 
Analyzing: SKBR3_Fly_E1 
thisUberseg stats:  0.03950216 6.886066 1.059203 
median fly ratio:  0.2681792 
fly/human number of reads:  0.009812022 
GC norm fly/human number of reads:  0.01015129 
len norm fly/human number of reads:  0.007934617 
multiplier 0.86 	minimized 81643.58 
 
20 SKBR3_Fly_E2 
thisLowratio stats:  0.02322661 14.2638 1.099027 
Analyzing: SKBR3_Fly_E2 
thisUberseg stats:  0.04041315 11.52479 1.068399 
median fly ratio:  0.4943063 
fly/human number of reads:  0.01489818 
GC norm fly/human number of reads:  0.01390659 
len norm fly/human number of reads:  0.01343049 
multiplier 0.86 	minimized 24320.17 
 
21 SKBR3_Fly_E3 
thisLowratio stats:  0.05310642 14.41023 1.110742 
Analyzing: SKBR3_Fly_E3 
thisUberseg stats:  0.07257752 6.437885 1.060496 
median fly ratio:  0.4174043 
fly/human number of reads:  0.0131077 
GC norm fly/human number of reads:  0.01274772 
len norm fly/human number of reads:  0.01107283 
multiplier 0.86 	minimized 31997.44 
 
22 SKBR3_Fly_E4 
thisLowratio stats:  0.044391 13.93624 1.10455 
Analyzing: SKBR3_Fly_E4 
thisUberseg stats:  0.08319234 7.223214 1.052709 
median fly ratio:  0.3399693 
fly/human number of reads:  0.0120593 
GC norm fly/human number of reads:  0.0121517 
len norm fly/human number of reads:  0.009952426 
multiplier 0.86 	minimized 47863.52 
 
23 SKBR3_Fly_E5 
thisLowratio stats:  0.03219683 12.24829 1.077918 
Analyzing: SKBR3_Fly_E5 
thisUberseg stats:  0.04283499 10.48557 1.046423 
median fly ratio:  0.04688301 
fly/human number of reads:  0.0001327592 
GC norm fly/human number of reads:  0.00124727 
len norm fly/human number of reads:  0.001341107 
multiplier 0.86 	minimized 2558472 
 
24 SKBR3_Fly_E6 
thisLowratio stats:  0.02625073 15.01671 1.092433 
Analyzing: SKBR3_Fly_E6 
thisUberseg stats:  0.03668087 12.87516 1.063053 
median fly ratio:  0.3471147 
fly/human number of reads:  0.009356408 
GC norm fly/human number of reads:  0.009007727 
len norm fly/human number of reads:  0.009303021 
multiplier 0.86 	minimized 46130.77 
 
There were 50 or more warnings (use warnings() to see the first 50)
> # nla3.88.ratio.mat <- nla3.88.results[[1]]
> # nla3.88.ratio.quantal.mat <- nla3.88.results[[2]]
> # nla3.88.seg.mat <- nla3.88.results[[3]]
> # nla3.88.seg.quantal.mat <- nla3.88.results[[4]]
> # write.table(nla3.88.ratio.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.ratio.R.txt", quote=F, row.names=F, sep="\t")
> # write.table(nla3.88.ratio.quantal.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.ratio.quantal.R.txt", quote=F, row.names=F, sep="\t")
> # write.table(nla3.88.seg.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.seg.R.txt", quote=F, row.names=F, sep="\t")
> 
> 
> # lengths <- read.table("/mnt/wigclust1/data/safe/kostic/bin_mapping/range125_600_LEN.txt", sep="\t", header=T, as.is=T, stringsAsFactors=F)
> # sorted <- lengths[order(lengths$median.len),]
> # lastten <- sorted[4750:5000,]
> # print(lastten[,1:5])
> # flynum <- lastten[grep("_dm", lastten$bin.chrom), ]
> # print(flynum[,1:2])
> # print(nrow(flynum))
> 
> proc.time()
   user  system elapsed 
 48.547   0.244  48.827 
