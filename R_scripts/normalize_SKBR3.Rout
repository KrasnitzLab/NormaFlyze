
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #### Use default R = 3.3 for DNAcopy_1.50.1
> 
> library("DNAcopy", lib.loc="/mnt/wigclust5/data/safe/kendall/DNAcopy_1.50.1")
> 
> # normalization function
> lowess.norm <- function(jtkx, jtky) {
+         jtklow <- lowess(jtkx, log(jtky), f=0.05)
+         jtkz <- approx(jtklow$x, jtklow$y, jtkx)
+         return(exp(log(jtky) - jtkz$y))
+ }
> 
> cbs.segment.uber01.hg19dm6 <- function(outdir, indir, varbin.gc, varbin.len, thisUber, abspos.col, alpha, nperm, undo.SD, min.width) {
+ 
+ 	gc <- read.table(varbin.gc, header=T)
+ 	lengths <- read.table(varbin.len, header = T)
+ 
+ 	chrom.numeric <- substring(gc$bin.chrom, 4)
+ 	chrom.numeric[which(gc$bin.chrom == "chrX")] <- "23"
+ 	chrom.numeric[which(gc$bin.chrom == "chrY")] <- "24"
+ 	chrom.numeric[which(gc$bin.chrom == "chr2L_dm")] <- "25"
+ 	chrom.numeric[which(gc$bin.chrom == "chr2R_dm")] <- "26"
+ 	chrom.numeric[which(gc$bin.chrom == "chr3L_dm")] <- "27"
+ 	chrom.numeric[which(gc$bin.chrom == "chr3R_dm")] <- "28"
+ 	chrom.numeric[which(gc$bin.chrom == "chr4_dm")] <- "29"
+ 	chrom.numeric[which(gc$bin.chrom == "chrX_dm")] <- "30"
+ 	chrom.numeric[which(gc$bin.chrom == "chrY_dm")] <- "31"
+ 	chrom.numeric <- as.numeric(chrom.numeric)
+ 
+ 	thisUberRatio <- thisUber
+ 	thisUberRatioQuantal <- thisUber
+ 	thisUberSeg <- thisUber
+ 	thisUberSegQuantal <- thisUber
+ 
+ 
+ 	for (i in 1:ncol(thisUber)) {
+ 		sample.name <- dimnames(thisUber)[[2]][i]
+ 		cat(i, dimnames(thisUber)[[2]][i], "\n")
+ 		
+ 		thisBincount <- thisUber[, i] + 1
+ 		thisRatio <- thisBincount / mean(thisBincount)
+ 		#normalize for GC content and median bin fragment length
+ 		thisLowratio_1 <- lowess.norm(gc$gc.content, thisRatio)
+ 		thisLowratio <- lowess.norm(lengths$median.len.ratio, thisLowratio_1)
+ 
+ 		thisUberRatio[, i] <- thisLowratio
+ 
+ 		cat("thisLowratio stats: ", min(thisLowratio), max(thisLowratio), mean(thisLowratio), "\n")
+ 
+ 		set.seed(25) 
+ 		CNA.object <- CNA(log(thisLowratio), chrom.numeric, gc$bin.start.chrompos, data.type="logratio", sampleid=dimnames(thisUber)[[2]][i]) 
+ 		smoothed.CNA.object <- smooth.CNA(CNA.object) 
+ 		segment.smoothed.CNA.object <- segment(smoothed.CNA.object, alpha=alpha, nperm=nperm, undo.splits="sdundo", undo.SD=undo.SD, min.width=2) 
+ 		thisShort <- segment.smoothed.CNA.object[[2]]
+ 
+ 		m <- matrix(data=0, nrow=nrow(thisUber), ncol=1)	
+ 		prevEnd <- 0
+ 		for (j in 1:nrow(thisShort)) {
+ 			thisStart <- prevEnd + 1
+ 			thisEnd <- prevEnd + thisShort$num.mark[j]
+ 			m[thisStart:thisEnd, 1] <- exp(thisShort$seg.mean[j])
+ 			prevEnd = thisEnd
+ 		}
+ 		thisUberSeg[, i] <- m[, 1]
+ 
+ 		cat("thisUberseg stats: ", min(thisUberSeg[, i]), max(thisUberSeg[, i]), mean(thisUberSeg[, i]), "\n")
+ 
+ 		# get median bin ratio for drosophila genome
+ 		startLoc <- min(which(chrom.numeric=="25"))
+ 		endLoc <- max(which(chrom.numeric=="28"))
+ 		med_val <- median(thisUberSeg[startLoc:endLoc,i])
+ 		cat("median fly ratio: ", med_val)
+ 
+ 		# divide segment values by the median of the fly chromosomes
+ 		rb <- thisUberSeg[,i] / med_val
+ 		humanSeg <- rb[1:startLoc-1]
+ 		end <- length(thisUberSeg[,i])
+ 		flySeg <- rb[startLoc:end]
+ 
+ 		#TODO dont hardcode .86-.95 ...get from the file containing fly-SKN1 alignment info
+ 		q <- seq(from=0.81, to=0.95, length.out=50)
+ 
+ 		residual_sum <- function(bounds, data){
+ 			nearest_int <- round(data*q)
+ 			sum((2*data*q - nearest_int)^2)
+ 		}
+ 
+ 		result <- optimize(residual_sum, q, data=humanSeg)
+ 		print(result)
+ 		cat("residual: ", sqrt(result$objective / length(humanSeg)))
+ 
+ 		#multipy the human rb values with the minimizing value
+ 		finalHumanSeg <- humanSeg * result$minimum
+ 
+ 		chr <- chrom.numeric
+ 		chr.shift <- c(chr[-1], chr[length(chr)])
+ 		vlines <- c(1, abspos.col[which(chr != chr.shift) + 1], abspos.col[nrow(thisUber)])
+ 		hlines <- c(0.5, 1.0, 1.5, 2.0)
+ 		chr.text <- c(1:22, "X", "Y", "2L\n\n", "2R\n", "3L", "3R\n\n", "4\n", "X", "Y\n\n")
+ 		vlines.shift <- c(vlines[-1], 4*10^9)
+ 		chr.at <- vlines + (vlines.shift - vlines) / 2
+ 		x.at <- c(0, 0.5, 1, 1.5, 2, 2.5, 3) * 10^9
+ 		x.labels <- c("0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0")
+ 
+ 		thisLowratioQuantal <- thisLowratio * result$minimum / med_val
+ 		thisSegQuantal <- c(finalHumanSeg,flySeg)
+ 
+ 		#thisUberRatioQuantal[, i] <- thisLowratioQuantal
+ 		#thisUberSegQuantal[, i] <- thisSegQuantal
+ 	
+ 		hlines <- c(0, 1, 2, 3, 4, 5, 6)
+ 
+ 		png(paste(outdir, "/", sample.name, ".5k.len.norm.png", sep=""), height=800, width=1200)
+ 		plot(x=abspos.col, y=thisLowratio, ylim=c(0,10), main=paste(sample.name, ""), xaxt="n", xlab="Genome Position Gb", ylab="Ratio", col="#CCCCCC")
+ 		axis(1, at=x.at, labels=x.labels)
+ 		lines(x=abspos.col, y=thisLowratio, col="#CCCCCC")
+ 		points(x=abspos.col, y=thisUberSeg[, i], col="#0000AA")
+ 		lines(x=abspos.col, y=thisUberSeg[, i], col="#0000AA")
+ 		abline(h=hlines)
+ 		abline(v=vlines)
+ 		mtext(chr.text, at = chr.at)
+ 		dev.off()
+ 		
+ 		png(paste(outdir, "/", sample.name, ".5k.len.quantal.png", sep=""), height=800, width=1200)
+ 		plot(x=abspos.col, y=thisLowratioQuantal, ylim=c(0,10), main=paste(sample.name, ""), xaxt="n", xlab="Genome Position Gb", ylab="Ratio", col="#CCCCCC")
+ 		axis(1, at=x.at, labels=x.labels)
+ 		lines(x=abspos.col, y=thisLowratioQuantal, col="#CCCCCC")
+ 		points(x=abspos.col, y=thisSegQuantal, col="#0000AA")
+ 		lines(x=abspos.col, y=thisSegQuantal, col="#0000AA")
+ 		abline(h=hlines)
+ 		abline(v=vlines)
+ 		mtext(chr.text, at = chr.at)
+ 		dev.off()
+ 
+ 		thisRatioOut <- data.frame(gc[, 1:3], "bincount"=thisBincount, "ratio" = thisRatio, "gc.content" = gc$gc.content, "lowratio" = thisLowratio, "seg.mean.LOWESS" = thisUberSeg[, i], "ratio.quantal" = thisLowratioQuantal, "seg.quantal" = thisSegQuantal)
+ 		write.table(thisRatioOut, sep="\t", file=paste(outdir, "/", sample.name, ".hg19dm6.varbin.data.txt", sep=""), quote=F, row.names=F)
+ 
+ 	}
+ 
+ 	return(list(thisUberRatio, thisUberRatioQuantal, thisUberSeg, thisUberSegQuantal))
+ }
> 
> #use this just to get the column containing absolute start positions of bins
> a.varbin <- read.table("/mnt/wigclust1/data/safe/kostic/SNS_data_2/b15_5_varbin_count.txt", sep="\t", header=F, as.is=T, stringsAsFactors=F)
> #####change file to one with correct date
> uber.ratio.nla3.88 <- read.table("/mnt/wigclust1/data/safe/kostic/SNS_data_SKBR3/range125_600_uber_varbin_count_data.txt", sep="\t", header=T, as.is=T, stringsAsFactors=F)
> nla3.88.count.mat <- as.matrix(uber.ratio.nla3.88)
> #######change to correct dated files
> nla3.88.results <- cbs.segment.uber01.hg19dm6(outdir="/mnt/wigclust1/data/safe/kostic/SNS_data_SKBR3", indir="", varbin.gc="/mnt/wigclust1/data/safe/kostic/bin_mapping/range125_600_GC.txt", varbin.len = "/mnt/wigclust1/data/safe/kostic/bin_mapping/range125_600_LEN.txt", thisUber=nla3.88.count.mat, abspos.col=a.varbin$V3, alpha=0.02, nperm=1000, undo.SD=0.5, min.width=3)
1 SKBR3_Fly_F4 
thisLowratio stats:  0.04362853 47.71806 1.140942 
Analyzing: SKBR3_Fly_F4 
thisUberseg stats:  0.06263068 11.04856 1.078711 
median fly ratio:  0.5401545$minimum
[1] 0.9499381

$objective
[1] 20859.92

residual:  2.0741032 SKBR3_Fly_F5 
thisLowratio stats:  0.0248134 19.69806 1.140418 
Analyzing: SKBR3_Fly_F5 
thisUberseg stats:  0.03480828 13.94331 1.101895 
median fly ratio:  0.7478895$minimum
[1] 0.9499381

$objective
[1] 12900.98

residual:  1.6311183 SKBR3_Fly_F7 
thisLowratio stats:  0.03368352 16.81775 1.147658 
Analyzing: SKBR3_Fly_F7 
thisUberseg stats:  0.0558157 6.396814 1.097982 
median fly ratio:  0.7536705$minimum
[1] 0.9499381

$objective
[1] 11981.35

residual:  1.5719074 Single_Fly_H8 
thisLowratio stats:  0.03635791 62.84931 1.439999 
Analyzing: Single_Fly_H8 
thisUberseg stats:  0.18836 17.33972 1.20239 
median fly ratio:  4.92488$minimum
[1] 0.9499381

$objective
[1] 644.674

residual:  0.36462295 SKBR3_Fly_H9 
thisLowratio stats:  0.05297632 85.33872 1.435732 
Analyzing: SKBR3_Fly_H9 
thisUberseg stats:  0.07058766 15.22289 1.143969 
median fly ratio:  3.657939$minimum
[1] 0.9499381

$objective
[1] 1149.9

residual:  0.4869726 SKBR3_Fly_D12 
thisLowratio stats:  0.04313367 15.8868 1.127946 
Analyzing: SKBR3_Fly_D12 
thisUberseg stats:  0.05273373 6.518211 1.081936 
median fly ratio:  0.805091$minimum
[1] 0.9499381

$objective
[1] 9726.833

residual:  1.4163147 SKN1_Fly_C6 
thisLowratio stats:  0.129496 8.640719 0.9899783 
Analyzing: SKN1_Fly_C6 
thisUberseg stats:  0.4257087 2.997264 0.9673892 
median fly ratio:  0.7109167$minimum
[1] 0.9499381

$objective
[1] 10252.43

residual:  1.4540768 SKBR3_Fly_E7 
thisLowratio stats:  0.02519605 17.73304 1.145744 
Analyzing: SKBR3_Fly_E7 
thisUberseg stats:  0.03793049 6.860635 1.105107 
median fly ratio:  0.8633803$minimum
[1] 0.9499381

$objective
[1] 8793.787

residual:  1.3466729 SKBR3_Fly_E9 
thisLowratio stats:  0.01766198 62.26031 1.171537 
Analyzing: SKBR3_Fly_E9 
thisUberseg stats:  0.02865005 6.689907 1.092213 
median fly ratio:  0.4419759$minimum
[1] 0.9499381

$objective
[1] 32766.92

residual:  2.59951110 SKBR3_Fly_E10 
thisLowratio stats:  0.0282078 20.31436 1.152376 
Analyzing: SKBR3_Fly_E10 
thisUberseg stats:  0.03490588 11.80237 1.104507 
median fly ratio:  0.6722668$minimum
[1] 0.9499381

$objective
[1] 16239.56

residual:  1.83004211 SKBR3_Fly_E11 
thisLowratio stats:  0.02568107 19.2081 1.14522 
Analyzing: SKBR3_Fly_E11 
thisUberseg stats:  0.03861942 12.06248 1.108386 
median fly ratio:  0.8893184$minimum
[1] 0.9499381

$objective
[1] 8575.859

residual:  1.32988112 SKBR3_Fly_E12 
thisLowratio stats:  0.02574441 15.89326 1.141086 
Analyzing: SKBR3_Fly_E12 
thisUberseg stats:  0.03968429 11.80591 1.102639 
median fly ratio:  0.8549605$minimum
[1] 0.9499381

$objective
[1] 9113.282

residual:  1.37091713 SKBR3_Fly_D3 
thisLowratio stats:  0.01695598 19.74539 1.147434 
Analyzing: SKBR3_Fly_D3 
thisUberseg stats:  0.02913835 6.992933 1.11078 
median fly ratio:  0.9630018$minimum
[1] 0.9499381

$objective
[1] 7190.063

residual:  1.217714 Single_Fly_H7 
thisLowratio stats:  0.01203154 97 1.954447 
Analyzing: Single_Fly_H7 
thisUberseg stats:  0.03467626 44.75038 1.376504 
median fly ratio:  13.01627$minimum
[1] 0.9499381

$objective
[1] 76.14508

residual:  0.125312615 SKBR3_Fly_F8 
thisLowratio stats:  0.01572756 490.6434 1.378699 
Analyzing: SKBR3_Fly_F8 
thisUberseg stats:  0.02393772 321.5008 1.221395 
median fly ratio:  1.829971$minimum
[1] 0.9499381

$objective
[1] 2688.266

residual:  0.744577716 SKBR3_Fly_F9 
thisLowratio stats:  0.01191973 145.0832 1.177331 
Analyzing: SKBR3_Fly_F9 
thisUberseg stats:  0.01825347 6.240124 1.07389 
median fly ratio:  0.3307475$minimum
[1] 0.9499381

$objective
[1] 55700.13

residual:  3.38923817 SKBR3_Fly_F11 
thisLowratio stats:  0.01106427 58.58159 1.157786 
Analyzing: SKBR3_Fly_F11 
thisUberseg stats:  0.0153875 6.435953 1.108048 
median fly ratio:  0.7383037$minimum
[1] 0.9499381

$objective
[1] 12942.6

residual:  1.63374618 SKBR3_Fly_F12 
thisLowratio stats:  0.01247709 40.75652 1.126565 
Analyzing: SKBR3_Fly_F12 
thisUberseg stats:  0.01748696 4.988823 1.086791 
median fly ratio:  0.7708203$minimum
[1] 0.9499381

$objective
[1] 10337.07

residual:  1.46006719 SKBR3_Fly_E1 
thisLowratio stats:  0.04465654 19.27419 1.158713 
Analyzing: SKBR3_Fly_E1 
thisUberseg stats:  0.06641051 8.53265 1.098916 
median fly ratio:  0.8610523$minimum
[1] 0.9499381

$objective
[1] 8803.377

residual:  1.34740620 SKBR3_Fly_E2 
thisLowratio stats:  0.02076209 14.98744 1.138059 
Analyzing: SKBR3_Fly_E2 
thisUberseg stats:  0.03652348 12.3988 1.103731 
median fly ratio:  0.9298798$minimum
[1] 0.9499381

$objective
[1] 7544.816

residual:  1.24737821 SKBR3_Fly_E3 
thisLowratio stats:  0.0518172 15.2005 1.143192 
Analyzing: SKBR3_Fly_E3 
thisUberseg stats:  0.07147554 6.674538 1.088166 
median fly ratio:  0.9494238$minimum
[1] 0.9499381

$objective
[1] 6615.059

residual:  1.16799422 SKBR3_Fly_E4 
thisLowratio stats:  0.04381804 14.56816 1.140701 
Analyzing: SKBR3_Fly_E4 
thisUberseg stats:  0.09039196 7.446916 1.081935 
median fly ratio:  0.8006751$minimum
[1] 0.9499381

$objective
[1] 9394.441

residual:  1.39190423 SKBR3_Fly_E5 
thisLowratio stats:  0.02550205 81.82107 1.158368 
Analyzing: SKBR3_Fly_E5 
thisUberseg stats:  0.0412543 11.21217 1.080557 
median fly ratio:  0.3728795$minimum
[1] 0.9499381

$objective
[1] 46284.42

residual:  3.08952224 SKBR3_Fly_E6 
thisLowratio stats:  0.02381683 15.56618 1.142868 
Analyzing: SKBR3_Fly_E6 
thisUberseg stats:  0.03936808 13.88487 1.105584 
median fly ratio:  0.8787103$minimum
[1] 0.9499381

$objective
[1] 8695.407

residual:  1.339118There were 50 or more warnings (use warnings() to see the first 50)
> nla3.88.ratio.mat <- nla3.88.results[[1]]
> nla3.88.ratio.quantal.mat <- nla3.88.results[[2]]
> nla3.88.seg.mat <- nla3.88.results[[3]]
> nla3.88.seg.quantal.mat <- nla3.88.results[[4]]
> # write.table(nla3.88.ratio.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.ratio.R.txt", quote=F, row.names=F, sep="\t")
> # write.table(nla3.88.ratio.quantal.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.ratio.quantal.R.txt", quote=F, row.names=F, sep="\t")
> # write.table(nla3.88.seg.mat, "/mnt/wigclust1/data/safe/kostic/SNS_data/uber.bt1.vt.r1.varbin.5k.seg.R.txt", quote=F, row.names=F, sep="\t")
> #dt <- data.frame(a.varbin[, 1], nla3.88.seg.quantal.mat)
> #write.table(dt, "/mnt/wigclust1/data/safe/kostic/SNS_data_SKBR3/uber_varbin_seg_quantal.txt", quote=F, row.names=F, sep="\t")
> 
> proc.time()
   user  system elapsed 
 49.411   0.255  49.696 
